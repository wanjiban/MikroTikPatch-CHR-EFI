name: build GPT

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4"

jobs:
  build:
    name: Build 
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest ARM64 release version
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            // 获取所有 release，并筛选 tag_name 包含 "arm64" 的最新版本
            const releases = await github.rest.repos.listReleases({
              owner: "elseif",
              repo: "MikroTikPatch"
            });
            const latestArm64 = releases.data.find(release => release.tag_name.includes("arm64"));
            if (!latestArm64) {
              core.setFailed("No ARM64 release found");
            }
            core.info(`Latest ARM64 release: ${latestArm64.tag_name}`);
            // 显式设置输出变量
            core.setOutput("version", latestArm64.tag_name);

      - name: Check server configuration
        run: |
          echo -e "--------------------------CPU Info--------------------------"
          echo "CPU Physical Num: $(grep 'physical id' /proc/cpuinfo | sort -u | wc -l)"
          echo -e "CPU Core Num: $(grep 'model name' /proc/cpuinfo | uniq -c) \n"
          echo "--------------------------Memory Info--------------------------"
          echo "Installed Memory Details:"
          sudo lshw -short -C memory | grep GiB
          echo -e "\n---------------------------Disk Info---------------------------"
          echo -e "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          df -Th

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt -y install curl qemu-utils rsync unzip zip
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Network Check
        run: |
          echo "Checking network connectivity..."
          ping -c 4 github.com

      - name: Load nbd module
        run: sudo modprobe nbd

      - name: Download
        run: |
          echo "Downloading version ${{ steps.get_release.outputs.version }}"
          curl -skL --retry 3 --connect-timeout 3 \
            -o chr.img.zip \
            https://github.com/elseif/MikroTikPatch/releases/download/${{ steps.get_release.outputs.version }}/chr-${{ steps.get_release.outputs.version }}.img.zip
          unzip chr.img.zip
          rm -f chr.img.zip

      - name: Convert to qcow2
        run: |
          qemu-img convert -f raw -O qcow2 chr-*.img chr.qcow2
          cp -af chr.qcow2 chr-efi.qcow2
          rm -f chr-*.img

      - name: Connect nbd
        run: |
          sudo qemu-nbd -c /dev/nbd0 chr.qcow2
          sudo qemu-nbd -c /dev/nbd1 chr-efi.qcow2

      - name: Format boot partition
        run: sudo mkfs -t fat /dev/nbd1p1

      - name: Create tmp dir
        run: |
          sudo rm -rf /tmp/chr*
          sudo mkdir -p /tmp/chr-bios/ /tmp/chr-efi/

      - name: Mount
        run: |
          sudo mount /dev/nbd0p1 /tmp/chr-bios/
          sudo mount /dev/nbd1p1 /tmp/chr-efi/

      - name: Sync files
        run: sudo rsync -a /tmp/chr-bios/ /tmp/chr-efi/

      - name: Umount
        run: |
          sudo umount /dev/nbd0p1
          sudo umount /dev/nbd1p1

      - name: Remove tmp dir
        run: sudo rm -rf /tmp/chr*

      - name: Modify partition table
        run: |
          (
          echo 2     # 使用 GPT
          echo t     # 修改分区代码
          echo 1     # 选择第一个分区
          echo 8300  # 修改代码为 Linux 文件系统 8300
          echo r     # Recovery/transformation
          echo h     # Hybrid MBR
          echo 1 2   # 添加分区到 Hybrid MBR
          echo n     # 将 EFI GPT (0xEE) 分区放到 MBR 首位？(Y/N)
          echo       # 默认 MBR 十六进制代码 83
          echo y     # 设置可启动标志？(Y/N)
          echo       # 默认 MBR 十六进制代码 83
          echo n     # 不设置可启动标志？(Y/N)
          echo n     # 未使用的分区空间保护更多分区？(Y/N)
          echo w     # 写入更改
          echo y 
